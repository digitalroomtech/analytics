#import User from "../plan/plan.queries.graphql"
#import User from "../user/user.queries.graphql"

enum TenantUserRoles{
    TENANT_ADMINISTRATOR
    TENANT_USER
}

enum TenantStatuses{
    ACTIVE
    INACTIVE
}

enum TenantUserStatuses{
    ACTIVE
    INACTIVE
}
enum TenantUserInvitationStatuses{
    REJECTED
    ACCEPTED
    PENDING
}

type Tenant{
    id:String
    name:String
    webhook:String
    timezone:String
    logo:String
    allowedUrls:[String]
    createdAt:String
    updatedAt:String
    plan:Plan
    identityColor:String
    status: TenantStatuses
}

type TenantUser{
    id:ID
    role:TenantUserRoles
    tenant:Tenant
    user:User
    status:TenantUserStatuses
    createdAt:String
    updatedAt:String
}

type TenantUserInvitation {
    id:String
    role: TenantUserRoles
    email:String
    status:TenantUserInvitationStatuses
    tenant: Tenant
    createdAt:String
    updatedAt:String
}

input CreateTenantInput {
    name:String
    webhook:String
    logo:String
    status: TenantStatuses
    allowedUrls:[String]
}

input UpdateTenantPlanInput{
    id:ID
}

input UpdateTenantInput {
    id:String
    name:String
    webhook:String
    identityColor:String
    logo:String
    timezone:String
    allowedUrls:[String]
    plan:UpdateTenantPlanInput
    file: Upload
    status: TenantStatuses
}

input TenantInput{
    id:ID
}

input CreateTenantUserInvitationInput {
    email:String
    role: TenantUserRoles
    tenant:TenantInput!
}

type TenantsPayload{
    count:Int,
    items:[Tenant]
}

type TenantUsersPayload{
    count:Int,
    items:[TenantUser]
}

type TenantUserInvitationsPayload{
    count:Int,
    items:[TenantUserInvitation]
}

type RemoveTenantUserInvitationPayload{
    success:Boolean
}

input TenantUserInvitationWhereInput {
    email:String
    role: TenantUserRoles
    status: TenantUserInvitationStatuses
    tenant:TenantInput
}

input TenantUserWhereInput {
    role: TenantUserRoles
    tenant:TenantInput
    search: String

}

input UpdateTenantUserInvitationInput {
    id:String
    status: TenantUserInvitationStatuses
}

input RemoveTenantUserInvitationInput {
    id:String
}

input ResendTenantUserInvitationInput {
    id:String
}

input TenantUserUserInput{
    id: String
    name: String
}


input UpdateTenantUserInput {
    id:String
    status: TenantUserStatuses
    role: TenantUserRoles
    user:TenantUserUserInput
}

type Mutation {
    createTenant(input:CreateTenantInput!):Tenant
    updateTenant(input:UpdateTenantInput!):Tenant
    createTenantUserInvitation(input:CreateTenantUserInvitationInput): TenantUserInvitation
    updateTenantUserInvitation(input:UpdateTenantUserInvitationInput): TenantUserInvitation
    removeTenantUserInvitation(input:RemoveTenantUserInvitationInput): RemoveTenantUserInvitationPayload
    resendTenantUserInvitation(input:ResendTenantUserInvitationInput): TenantUserInvitation
    updateTenantUser(input:UpdateTenantUserInput): TenantUser
}



type Query{
    tenants:TenantsPayload
    tenant(id:ID!):Tenant
    tenantUsers(where:TenantUserWhereInput,page: Int, pageSize: Int):TenantUsersPayload
    tenantUserInvitations(where:TenantUserInvitationWhereInput, page: Int, pageSize: Int):TenantUserInvitationsPayload
}